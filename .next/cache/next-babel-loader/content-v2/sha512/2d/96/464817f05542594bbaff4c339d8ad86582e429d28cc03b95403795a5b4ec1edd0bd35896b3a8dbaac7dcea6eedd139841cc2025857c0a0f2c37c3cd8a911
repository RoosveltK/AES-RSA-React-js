{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/media/roosvelt/SAVE_IMP1/ICT4D/ICT4D-L2/S2/ICT214/KENNE_NGNINPIA_ROOSVELT_19K2782/rsa-aes/components/aes/Modalchiffrement.jsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport AesCtr from \"../../public/AesCtr\";\nexport default class Modalchiffrement extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleClose\", () => this.setState({\n      show: false\n    }));\n\n    _defineProperty(this, \"handleShow\", () => this.setState({\n      show: true\n    }));\n\n    _defineProperty(this, \"handleCrypt\", event => {\n      event.preventDefault();\n\n      if (this.state.clef != \"\" && this.state.message != \"\") {\n        this.setState({\n          isLoading: true\n        });\n        const Msg = AesCtr.encrypt(this.state.message, this.state.clef, 256);\n        setTimeout(() => {\n          this.handleClose();\n          this.setState({\n            isLoading: false\n          });\n        }, 2000);\n        this.props.recup(Msg);\n      }\n    });\n\n    this.state = {\n      isLoading: false,\n      show: false,\n      clef: \"\",\n      message: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btnChif\",\n        onClick: this.handleShow,\n        children: \"Chiffrer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: this.state.show,\n        onHide: this.handleClose,\n        backdrop: \"static\",\n        keyboard: false,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          className: \"color-titre-ajout\",\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            className: \"colorTitre\",\n            children: \"CHIFFREMENT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          className: \"cardTocrypt textColorModal\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-form\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Entrez la clef\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: \"form-control\",\n                  placeholder: \"\",\n                  onChange: e => this.setState({\n                    clef: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Entrez le message \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: \"form-control\",\n                  placeholder: \"\",\n                  onChange: e => this.setState({\n                    message: e.target.value\n                  }),\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"btnModal\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btnAll\",\n                  onClick: this.handleClose,\n                  children: \"Fermer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 19\n                }, this), this.state.isLoading == true ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  disabled: true,\n                  className: \"btn color-titre-ajout\",\n                  children: \"Patientez ...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 21\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  onClick: this.handleCrypt,\n                  className: \"btn btnAll\",\n                  children: \"Valider\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/media/roosvelt/SAVE_IMP1/ICT4D/ICT4D-L2/S2/ICT214/KENNE_NGNINPIA_ROOSVELT_19K2782/rsa-aes/components/aes/Modalchiffrement.jsx"],"names":["React","Button","Modal","AesCtr","Modalchiffrement","Component","constructor","props","setState","show","event","preventDefault","state","clef","message","isLoading","Msg","encrypt","setTimeout","handleClose","recup","render","handleShow","e","target","value","handleCrypt"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport AesCtr from \"../../public/AesCtr\";\n\nexport default class Modalchiffrement extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      show: false,\n      clef: \"\",\n      message: \"\",\n    };\n  }\n  handleClose = () => this.setState({ show: false });\n  handleShow = () => this.setState({ show: true });\n\n  handleCrypt = (event) => {\n    event.preventDefault();\n\n    if (this.state.clef != \"\" && this.state.message != \"\") {\n      this.setState({ isLoading: true });\n      const Msg = AesCtr.encrypt(this.state.message, this.state.clef, 256);\n      setTimeout(() => {\n        this.handleClose();\n        this.setState({ isLoading: false });\n      }, 2000);\n      this.props.recup(Msg);\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <button className=\"btn btnChif\" onClick={this.handleShow}>\n          Chiffrer\n        </button>\n        <Modal\n          show={this.state.show}\n          onHide={this.handleClose}\n          backdrop=\"static\"\n          keyboard={false}\n        >\n          <Modal.Header className=\"color-titre-ajout\" closeButton>\n            <Modal.Title className=\"colorTitre\">CHIFFREMENT</Modal.Title>\n          </Modal.Header>\n          <Modal.Body className=\"cardTocrypt textColorModal\">\n            <div className=\"modal-form\">\n              <form>\n                <div>\n                  <label>Entrez la clef</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"\"\n                    onChange={(e) => this.setState({ clef: e.target.value })}\n                  />\n                </div>\n                <div>\n                  <label>Entrez le message </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"\"\n                    onChange={(e) => this.setState({ message: e.target.value })}\n                    required\n                  />\n                </div>\n\n                <div className=\"btnModal\">\n                  <button className=\"btn btnAll\" onClick={this.handleClose}>\n                    Fermer\n                  </button>\n                  {this.state.isLoading == true ? (\n                    <button\n                      type=\"submit\"\n                      disabled\n                      className=\"btn color-titre-ajout\"\n                    >\n                      Patientez ...\n                    </button>\n                  ) : (\n                    <button\n                      type=\"submit\"\n                      onClick={this.handleCrypt}\n                      className=\"btn btnAll\"\n                    >\n                      Valider\n                    </button>\n                  )}\n                </div>\n              </form>\n            </div>\n          </Modal.Body>\n        </Modal>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}