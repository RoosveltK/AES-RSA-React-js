{"ast":null,"code":"class Aes {\n  /**\n   * AES Cipher function: encrypt 'input' state with Rijndael algorithm [§5.1];\n   *   applies Nr rounds (10/12/14) using key schedule w for 'add round key' stage.\n   *\n   * @param   {number[]}   input - 16-byte (128-bit) input state array.\n   * @param   {number[][]} w - Key schedule as 2D byte-array (Nr+1 × Nb bytes).\n   * @returns {number[]}   Encrypted output state array.\n   */\n  static cipher(input, w) {\n    const Nb = 4; // block size (in words): no of columns in state (fixed at 4 for AES)\n\n    const Nr = w.length / Nb - 1; // no of rounds: 10/12/14 for 128/192/256-bit keys\n\n    let state = [[], [], [], []]; // initialise 4×Nb byte-array 'state' with input [§3.4]\n\n    for (let i = 0; i < 4 * Nb; i++) state[i % 4][Math.floor(i / 4)] = input[i];\n\n    state = Aes.addRoundKey(state, w, 0, Nb);\n\n    for (let round = 1; round < Nr; round++) {\n      state = Aes.subBytes(state, Nb);\n      state = Aes.shiftRows(state, Nb);\n      state = Aes.mixColumns(state, Nb);\n      state = Aes.addRoundKey(state, w, round, Nb);\n    }\n\n    state = Aes.subBytes(state, Nb);\n    state = Aes.shiftRows(state, Nb);\n    state = Aes.addRoundKey(state, w, Nr, Nb);\n    const output = new Array(4 * Nb); // convert state to 1-d array before returning [§3.4]\n\n    for (let i = 0; i < 4 * Nb; i++) output[i] = state[i % 4][Math.floor(i / 4)];\n\n    return output;\n  }\n  /**\n   * Perform key expansion to generate a key schedule from a cipher key [§5.2].\n   *\n   * @param   {number[]}   key - Cipher key as 16/24/32-byte array.\n   * @returns {number[][]} Expanded key schedule as 2D byte-array (Nr+1 × Nb bytes).\n   */\n\n\n  static keyExpansion(key) {\n    const Nb = 4; // block size (in words): no of columns in state (fixed at 4 for AES)\n\n    const Nk = key.length / 4; // key length (in words): 4/6/8 for 128/192/256-bit keys\n\n    const Nr = Nk + 6; // no of rounds: 10/12/14 for 128/192/256-bit keys\n\n    const w = new Array(Nb * (Nr + 1));\n    let temp = new Array(4); // initialise first Nk words of expanded key with cipher key\n\n    for (let i = 0; i < Nk; i++) {\n      const r = [key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]];\n      w[i] = r;\n    } // expand the key into the remainder of the schedule\n\n\n    for (let i = Nk; i < Nb * (Nr + 1); i++) {\n      w[i] = new Array(4);\n\n      for (let t = 0; t < 4; t++) temp[t] = w[i - 1][t]; // each Nk'th word has extra transformation\n\n\n      if (i % Nk == 0) {\n        temp = Aes.subWord(Aes.rotWord(temp));\n\n        for (let t = 0; t < 4; t++) temp[t] ^= Aes.rCon[i / Nk][t];\n      } // 256-bit key has subWord applied every 4th word\n      else if (Nk > 6 && i % Nk == 4) {\n          temp = Aes.subWord(temp);\n        } // xor w[i] with w[i-1] and w[i-Nk]\n\n\n      for (let t = 0; t < 4; t++) w[i][t] = w[i - Nk][t] ^ temp[t];\n    }\n\n    return w;\n  }\n  /**\n   * Apply SBox to state S [§5.1.1].\n   *\n   * @private\n   */\n\n\n  static subBytes(s, Nb) {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < Nb; c++) s[r][c] = Aes.sBox[s[r][c]];\n    }\n\n    return s;\n  }\n  /**\n   * Shift row r of state S left by r bytes [§5.1.2].\n   *\n   * @private\n   */\n\n\n  static shiftRows(s, Nb) {\n    const t = new Array(4);\n\n    for (let r = 1; r < 4; r++) {\n      for (let c = 0; c < 4; c++) t[c] = s[r][(c + r) % Nb]; // shift into temp copy\n\n\n      for (let c = 0; c < 4; c++) s[r][c] = t[c]; // and copy back\n\n    } // note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES):\n\n\n    return s; // see asmaes.sourceforge.net/rijndael/rijndaelImplementation.pdf\n  }\n  /**\n   * Combine bytes of each col of state S [§5.1.3].\n   *\n   * @private\n   */\n\n\n  static mixColumns(s, Nb) {\n    for (let c = 0; c < Nb; c++) {\n      const a = new Array(Nb); // 'a' is a copy of the current column from 's'\n\n      const b = new Array(Nb); // 'b' is a•{02} in GF(2^8)\n\n      for (let r = 0; r < 4; r++) {\n        a[r] = s[r][c];\n        b[r] = s[r][c] & 0x80 ? s[r][c] << 1 ^ 0x011b : s[r][c] << 1;\n      } // a[n] ^ b[n] is a•{03} in GF(2^8)\n\n\n      s[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]; // {02}•a0 + {03}•a1 + a2 + a3\n\n      s[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]; // a0 • {02}•a1 + {03}•a2 + a3\n\n      s[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]; // a0 + a1 + {02}•a2 + {03}•a3\n\n      s[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]; // {03}•a0 + a1 + a2 + {02}•a3\n    }\n\n    return s;\n  }\n  /**\n   * Xor Round Key into state S [§5.1.4].\n   *\n   * @private\n   */\n\n\n  static addRoundKey(state, w, rnd, Nb) {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < Nb; c++) state[r][c] ^= w[rnd * 4 + c][r];\n    }\n\n    return state;\n  }\n  /**\n   * Apply SBox to 4-byte word w.\n   *\n   * @private\n   */\n\n\n  static subWord(w) {\n    for (let i = 0; i < 4; i++) w[i] = Aes.sBox[w[i]];\n\n    return w;\n  }\n  /**\n   * Rotate 4-byte word w left by one byte.\n   *\n   * @private\n   */\n\n\n  static rotWord(w) {\n    const tmp = w[0];\n\n    for (let i = 0; i < 3; i++) w[i] = w[i + 1];\n\n    w[3] = tmp;\n    return w;\n  }\n\n} // sBox is pre-computed multiplicative inverse in GF(2^8) used in subBytes and keyExpansion [§5.1.1]\n\n\nAes.sBox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]; // rCon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [§5.2]\n\nAes.rCon = [[0x00, 0x00, 0x00, 0x00], [0x01, 0x00, 0x00, 0x00], [0x02, 0x00, 0x00, 0x00], [0x04, 0x00, 0x00, 0x00], [0x08, 0x00, 0x00, 0x00], [0x10, 0x00, 0x00, 0x00], [0x20, 0x00, 0x00, 0x00], [0x40, 0x00, 0x00, 0x00], [0x80, 0x00, 0x00, 0x00], [0x1b, 0x00, 0x00, 0x00], [0x36, 0x00, 0x00, 0x00]];\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport default Aes;","map":{"version":3,"sources":["/media/roosvelt/SAVE_IMP1/ICT4D/ICT4D-L2/S2/ICT214/KENNE_NGNINPIA_ROOSVELT_19K2782/rsa-aes/public/Aes.js"],"names":["Aes","cipher","input","w","Nb","Nr","length","state","i","Math","floor","addRoundKey","round","subBytes","shiftRows","mixColumns","output","Array","keyExpansion","key","Nk","temp","r","t","subWord","rotWord","rCon","s","c","sBox","a","b","rnd","tmp"],"mappings":"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","sourcesContent":["class Aes {\n\n    /**\n     * AES Cipher function: encrypt 'input' state with Rijndael algorithm [§5.1];\n     *   applies Nr rounds (10/12/14) using key schedule w for 'add round key' stage.\n     *\n     * @param   {number[]}   input - 16-byte (128-bit) input state array.\n     * @param   {number[][]} w - Key schedule as 2D byte-array (Nr+1 × Nb bytes).\n     * @returns {number[]}   Encrypted output state array.\n     */\n    static cipher(input, w) {\n        const Nb = 4;               // block size (in words): no of columns in state (fixed at 4 for AES)\n        const Nr = w.length/Nb - 1; // no of rounds: 10/12/14 for 128/192/256-bit keys\n\n        let state = [ [], [], [], [] ];  // initialise 4×Nb byte-array 'state' with input [§3.4]\n        for (let i=0; i<4*Nb; i++) state[i%4][Math.floor(i/4)] = input[i];\n\n        state = Aes.addRoundKey(state, w, 0, Nb);\n\n        for (let round=1; round<Nr; round++) {\n            state = Aes.subBytes(state, Nb);\n            state = Aes.shiftRows(state, Nb);\n            state = Aes.mixColumns(state, Nb);\n            state = Aes.addRoundKey(state, w, round, Nb);\n        }\n\n        state = Aes.subBytes(state, Nb);\n        state = Aes.shiftRows(state, Nb);\n        state = Aes.addRoundKey(state, w, Nr, Nb);\n\n        const output = new Array(4*Nb);  // convert state to 1-d array before returning [§3.4]\n        for (let i=0; i<4*Nb; i++) output[i] = state[i%4][Math.floor(i/4)];\n\n        return output;\n    }\n\n\n    /**\n     * Perform key expansion to generate a key schedule from a cipher key [§5.2].\n     *\n     * @param   {number[]}   key - Cipher key as 16/24/32-byte array.\n     * @returns {number[][]} Expanded key schedule as 2D byte-array (Nr+1 × Nb bytes).\n     */\n    static keyExpansion(key) {\n        const Nb = 4;            // block size (in words): no of columns in state (fixed at 4 for AES)\n        const Nk = key.length/4; // key length (in words): 4/6/8 for 128/192/256-bit keys\n        const Nr = Nk + 6;       // no of rounds: 10/12/14 for 128/192/256-bit keys\n\n        const w = new Array(Nb*(Nr+1));\n        let temp = new Array(4);\n\n        // initialise first Nk words of expanded key with cipher key\n        for (let i=0; i<Nk; i++) {\n            const r = [ key[4*i], key[4*i+1], key[4*i+2], key[4*i+3] ];\n            w[i] = r;\n        }\n\n        // expand the key into the remainder of the schedule\n        for (let i=Nk; i<(Nb*(Nr+1)); i++) {\n            w[i] = new Array(4);\n            for (let t=0; t<4; t++) temp[t] = w[i-1][t];\n            // each Nk'th word has extra transformation\n            if (i % Nk == 0) {\n                temp = Aes.subWord(Aes.rotWord(temp));\n                for (let t=0; t<4; t++) temp[t] ^= Aes.rCon[i/Nk][t];\n            }\n            // 256-bit key has subWord applied every 4th word\n            else if (Nk > 6 && i%Nk == 4) {\n                temp = Aes.subWord(temp);\n            }\n            // xor w[i] with w[i-1] and w[i-Nk]\n            for (let t=0; t<4; t++) w[i][t] = w[i-Nk][t] ^ temp[t];\n        }\n\n        return w;\n    }\n\n\n    /**\n     * Apply SBox to state S [§5.1.1].\n     *\n     * @private\n     */\n    static subBytes(s, Nb) {\n        for (let r=0; r<4; r++) {\n            for (let c=0; c<Nb; c++) s[r][c] = Aes.sBox[s[r][c]];\n        }\n        return s;\n    }\n\n\n    /**\n     * Shift row r of state S left by r bytes [§5.1.2].\n     *\n     * @private\n     */\n    static shiftRows(s, Nb) {\n        const t = new Array(4);\n        for (let r=1; r<4; r++) {\n            for (let c=0; c<4; c++) t[c] = s[r][(c+r)%Nb];  // shift into temp copy\n            for (let c=0; c<4; c++) s[r][c] = t[c];         // and copy back\n        }          // note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES):\n        return s;  // see asmaes.sourceforge.net/rijndael/rijndaelImplementation.pdf\n    }\n\n\n    /**\n     * Combine bytes of each col of state S [§5.1.3].\n     *\n     * @private\n     */\n    static mixColumns(s, Nb) {\n        for (let c=0; c<Nb; c++) {\n            const a = new Array(Nb);  // 'a' is a copy of the current column from 's'\n            const b = new Array(Nb);  // 'b' is a•{02} in GF(2^8)\n            for (let r=0; r<4; r++) {\n                a[r] = s[r][c];\n                b[r] = s[r][c]&0x80 ? s[r][c]<<1 ^ 0x011b : s[r][c]<<1;\n            }\n            // a[n] ^ b[n] is a•{03} in GF(2^8)\n            s[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]; // {02}•a0 + {03}•a1 + a2 + a3\n            s[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]; // a0 • {02}•a1 + {03}•a2 + a3\n            s[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]; // a0 + a1 + {02}•a2 + {03}•a3\n            s[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]; // {03}•a0 + a1 + a2 + {02}•a3\n        }\n        return s;\n    }\n\n\n    /**\n     * Xor Round Key into state S [§5.1.4].\n     *\n     * @private\n     */\n    static addRoundKey(state, w, rnd, Nb) {\n        for (let r=0; r<4; r++) {\n            for (let c=0; c<Nb; c++) state[r][c] ^= w[rnd*4+c][r];\n        }\n        return state;\n    }\n\n\n    /**\n     * Apply SBox to 4-byte word w.\n     *\n     * @private\n     */\n    static subWord(w) {\n        for (let i=0; i<4; i++) w[i] = Aes.sBox[w[i]];\n        return w;\n    }\n\n\n    /**\n     * Rotate 4-byte word w left by one byte.\n     *\n     * @private\n     */\n    static rotWord(w) {\n        const tmp = w[0];\n        for (let i=0; i<3; i++) w[i] = w[i+1];\n        w[3] = tmp;\n        return w;\n    }\n\n\n}\n\n\n// sBox is pre-computed multiplicative inverse in GF(2^8) used in subBytes and keyExpansion [§5.1.1]\nAes.sBox = [\n    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\n    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\n    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\n    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\n    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\n    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\n    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\n    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\n    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\n    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\n    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\n    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\n    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\n    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\n    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\n    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,\n];\n\n\n// rCon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [§5.2]\nAes.rCon = [\n    [ 0x00, 0x00, 0x00, 0x00 ],\n    [ 0x01, 0x00, 0x00, 0x00 ],\n    [ 0x02, 0x00, 0x00, 0x00 ],\n    [ 0x04, 0x00, 0x00, 0x00 ],\n    [ 0x08, 0x00, 0x00, 0x00 ],\n    [ 0x10, 0x00, 0x00, 0x00 ],\n    [ 0x20, 0x00, 0x00, 0x00 ],\n    [ 0x40, 0x00, 0x00, 0x00 ],\n    [ 0x80, 0x00, 0x00, 0x00 ],\n    [ 0x1b, 0x00, 0x00, 0x00 ],\n    [ 0x36, 0x00, 0x00, 0x00 ],\n];\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport default Aes;"]},"metadata":{},"sourceType":"module"}